"use strict";
const tslib_1 = require("tslib");
const remark = require("remark");
const { readFile } = require("fs").promises;
const { join } = require("path");
const SIDEBAR = "_sidebar.md";
/**
 * Converts a node and its children to their plain text value (excl. markdown)
 * @param {unist.Node | unist.Parent} node from which to extract text
 *
 * @returns {String} Node as plain text
 */
function text(node) {
    if (node.children)
        return node.children.map(text).join("");
    return String(node.value);
}
/**
 * Extracts a topic ref (title -> url) mapping from the paragraph,
 * if its first child is a link.
 *
 * @param {unist.Parent} paragraph Paragraph from which to extract topic ref
 *
 * @returns {NavEntryWithTitle|undefined} Topic ref or undefined if not found
 */
function reference(paragraph) {
    const [firstChild] = paragraph.children;
    if (firstChild.type !== "link")
        return;
    const link = firstChild;
    const title = text(link.children[0]);
    return {
        title: title,
        path: link.url.replace(/^\//, ""),
        children: [],
    };
}
/**
 * Walks the AST and collects nav entries from list items
 *
 * @param {*} node AST to walk
 * @param {*} parentNav Parent nav item to fill with children (will be modified)
 *
 * @returns {NavEntry[]} Docsify navigation tree
 */
function visit(node, parentNav = []) {
    if (!node.children)
        return parentNav;
    const parent = node;
    let nav = parentNav;
    if (parent.type === "listItem") {
        nav = visitListItem(parent, parentNav).children;
    }
    parent.children.forEach(c => visit(c, nav));
    return parentNav;
}
function visitListItem(listItem, nav) {
    const [paragraph] = listItem.children;
    let topic = reference(paragraph);
    if (!topic) {
        const title = text(paragraph);
        topic = { title, children: [] };
    }
    nav.push(topic);
    return topic;
}
module.exports = (opts) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const processor = remark();
    const sidebar = yield readFile(join(opts.path, SIDEBAR), "utf-8");
    const ast = yield processor.parse(sidebar);
    return visit(ast);
});
//# sourceMappingURL=index.js.map