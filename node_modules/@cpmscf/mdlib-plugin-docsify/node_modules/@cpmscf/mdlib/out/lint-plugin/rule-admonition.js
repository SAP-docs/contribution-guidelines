/**
 * @author D053411
 * @copyright 2020 SAP SE
 * @license SEE LICENSE IN LICENSE
 * @module titlecase
 * @fileoverview
 *   Warn when headings increment with more than 1 level at a time.
 *
 * @example {"name": "ok.md"}
 *
 *   # Alpha
 *
 *   ## Bravo
 *
 * @example {"name": "not-ok.md", "label": "input"}
 *
 *   # Charlie
 *
 *   ### Delta
 *
 * @example {"name": "not-ok.md", "label": "output"}
 *
 *   3:1-3:10: Heading levels should increment by one level at a time
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.admonitionRule = exports.CODE_UNKNOWN_ADMONITION = exports.CODE_BROKEN_ADMONITION = void 0;
const rule = require("unified-lint-rule");
const visit = require("unist-util-visit");
const generated = require("unist-util-generated");
const helpers_1 = require("../helpers");
// https://squidfunk.github.io/mkdocs-material/reference/admonitions/#supported-types
const DEFAULT_ADMONITION_TYPES = [
    "abstract",
    "attention",
    "bug",
    "caution",
    "check",
    "cite",
    "danger",
    "done",
    "error",
    "example",
    "fail",
    "failure",
    "faq",
    "help",
    "hint",
    "important",
    "info",
    "missing",
    "note",
    "question",
    "quote",
    "seealso",
    "success",
    "summary",
    "tip",
    "tldr",
    "todo",
    "warning",
];
const ADMONITION_TITLE_REGEX = /( *)!+( *)([a-z]+) *("([^"]+)")?/;
const tabSize = 4;
exports.CODE_BROKEN_ADMONITION = "admonition.broken";
exports.CODE_UNKNOWN_ADMONITION = "admonition.unknown";
exports.admonitionRule = rule("remark-lint:admonition", function (tree, file) {
    visit(tree, "text", visitText);
    function visitText(text) {
        if (generated(text))
            return;
        const originalContent = String(file.contents.slice(text.position.start.offset, text.position.end.offset));
        const match = ADMONITION_TITLE_REGEX.exec(originalContent);
        if (!match)
            return;
        const lines = originalContent.split(/\n/);
        let lineOffset = 0;
        let startOffset = 0;
        for (const line of lines) {
            const match = ADMONITION_TITLE_REGEX.exec(line);
            if (!match)
                continue;
            const type = match[3];
            const whiteSpace = match[1];
            const indent = " ".repeat(Math.floor(whiteSpace.length / tabSize) * tabSize);
            const title = type + (match[4] ? ` ${match[4]}` : "");
            const fixedLine = `${indent}!!! ${title}`;
            if (DEFAULT_ADMONITION_TYPES.indexOf(type) === -1) {
                const reason = `Unknown admonition type: '${type}'`;
                helpers_1.makeMessage(exports.CODE_UNKNOWN_ADMONITION, originalContent, undefined, text, reason, file);
            }
            const node = {
                type: "text",
                value: line,
                position: {
                    start: {
                        line: text.position.start.line + lineOffset,
                        column: 1,
                        offset: text.position.start.offset + startOffset,
                    },
                    end: {
                        line: text.position.start.line + lineOffset,
                        column: line.length,
                        offset: text.position.start.offset + startOffset + line.length,
                    },
                },
            };
            if (line !== fixedLine) {
                const reason = "Broken admonition formatting";
                helpers_1.makeMessage(exports.CODE_BROKEN_ADMONITION, line, fixedLine, node, reason, file);
            }
            startOffset += line.length + 1; // plus \n
            lineOffset++;
        }
    }
});
//# sourceMappingURL=rule-admonition.js.map