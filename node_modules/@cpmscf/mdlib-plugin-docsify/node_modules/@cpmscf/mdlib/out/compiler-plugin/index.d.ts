import { Eat as RemarkEat, Parser as RemarkParser, RemarkParseOptions } from "remark-parse";
import { Node, Point } from "unist";
import { PositionalPoint, Offset } from "vfile-location";
import { Compiler as RemarkCompiler } from "remark-stringify";
export interface StateEnter {
    (): StateExit;
}
export interface StateExit {
    (): void;
}
export declare type Decoder = {
    (value: string, position: Point, handler: () => any): void;
    raw: (value: string, position: Point, options?: any) => string;
};
export declare type Eat = RemarkEat & {
    now: () => Point;
};
export declare type Parser = RemarkParser & {
    decode: Decoder;
    unescape: (value: string) => string;
    tokenizeBlock: (value: string, location: Point) => Node;
    offset: {
        [P: number]: number;
    };
    options: RemarkParseOptions;
    inList: boolean;
    inBlock: boolean;
    inLink: boolean;
    atStart: boolean;
    toOffset: (point: PositionalPoint) => Offset;
    exitStart: StateEnter;
    enterLink: StateEnter;
    enterList: StateEnter;
    enterBlock: StateEnter;
    tokenizeInline: (a: string, b: Point) => Node[];
    blockTokenizers: any[];
};
export declare type Compiler = RemarkCompiler & {
    inListItem: boolean;
    inHeading: boolean;
    enterListItem: StateEnter;
    enterHeading: StateEnter;
};
export declare type Tokenizer = (this: Parser, eat: Eat, value: string, silent: boolean) => Node | boolean | void;
//# sourceMappingURL=index.d.ts.map