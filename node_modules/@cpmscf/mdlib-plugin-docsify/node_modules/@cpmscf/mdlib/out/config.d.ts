import { DitaOptions } from "./dita/dita";
import { ProfileOptions } from "./lint-plugin/rule-profile";
import * as YAML from "yaml";
import { MkdocsNavItem, TermReplacementConfig } from ".";
import { DitaUploadOptions } from "./dita/upload";
import { TranslationOptions } from "./translation/translation";
export interface RcConfig {
    /**
     * Path to docs root folder, relative to `process.cwd()`. Defaults to `process.cwd()`.
     * Note: During runtime, this is automatically normalized to an absolute path.
     */
    path: string;
    /**
     * Path to config file relative to `path`. Defaults to `mkdocs.yml`.
     */
    config: string;
    /**
     * List of paths to ignore relative to `path`
     */
    ignore: string[];
    /**
     * List of known profiles for link checking
     */
    profiles: ProfileOptions;
    dita?: DitaOptions;
    upload?: DitaUploadOptions;
    mkdocs: MkdocsValidatorConfig;
    terms: TermReplacementConfig;
    translation?: TranslationOptions;
}
export interface MkdocsValidatorConfig {
    /**
     * Check if all Markdown files in the project dir are referenced in mkdocs.yml.
     * Default: false
     */
    validateFiles: boolean;
    /**
     * Check topic heads and alternative topic titles in `mkdocs.yml` are in title case
     * Default: true
     */
    headingCase: boolean;
}
export interface MkdocsConfig {
    docs_dir: string;
    site_name?: string;
    site_description?: string;
    extra?: any;
    markdown_extensions: any[];
    plugins: any[];
    nav: MkdocsNavItem[];
    /**
     * YAML AST for inspection and reporting
     */
    document?: YAML.Document;
    /**
     * Raw string for inspection and reporting
     */
    raw?: string;
}
export declare function defaultRcConfig(): RcConfig;
export declare function loadConfig(projectRoot?: string): RcConfig;
export declare const MKDOCS_DEFAULTS: MkdocsConfig;
/**
 * Load mkdocs config from the specified options or raw config string.
 *
 * @param {string | Partial<RcConfig> | undefined} optsOrRawYaml Raw YAML string or options indicating config file location
 * @returns {MkdocsConfig} MkdocsConfig with defaults
 */
export declare function loadMkdocsConfig(optsOrRawYaml?: Partial<RcConfig> | string): Promise<MkdocsConfig>;
//# sourceMappingURL=config.d.ts.map