"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.point = exports.position = exports.jsonPathEntries = exports.makeMessage = exports.groupBy = exports.debounce = exports.resolvePath = exports.MARKDOWN_LANGUAGE_ID = void 0;
const diff_1 = require("diff");
exports.MARKDOWN_LANGUAGE_ID = "markdown";
const LINK_BASE = "https://go.sap.corp/";
function resolvePath(x, path) {
    return path.split(".").reduce((x, k) => x ? x[k] : undefined, x);
}
exports.resolvePath = resolvePath;
// eslint-disable-next-line @typescript-eslint/ban-types
function debounce(cb, time = 50) {
    let handle;
    const callable = (...args) => {
        clearTimeout(handle);
        handle = setTimeout(() => cb(...args), time);
    };
    return callable;
}
exports.debounce = debounce;
function groupBy(xs, keyPath) {
    const keys = keyPath.split(".");
    return xs.reduce(function (rv, x) {
        var _a;
        const kv = keys.reduce((x, k) => x[k], x);
        if (!rv.has(kv))
            rv.set(kv, []);
        (_a = rv.get(kv)) === null || _a === void 0 ? void 0 : _a.push(x);
        return rv;
    }, new Map());
}
exports.groupBy = groupBy;
function makeMessage(code, originalContent, fixedContent, nodeOrPosition, reason, file, shortLink) {
    if (fixedContent !== originalContent) {
        const message = file.message(reason, nodeOrPosition);
        message.content = originalContent;
        message.ruleId = code;
        message.shortLink = LINK_BASE + shortLink;
        if (fixedContent !== undefined) {
            message.fix = {
                diffs: diff_1.diffWordsWithSpace(originalContent, fixedContent),
                content: fixedContent,
            };
        }
    }
}
exports.makeMessage = makeMessage;
function jsonPathEntries(o) {
    return Object.entries(o).reduce((acc, [k, v]) => {
        if (typeof v === "object" && !Array.isArray(v)) {
            return acc.concat(jsonPathEntries(v).map(([ki, vi]) => [[k, ki].join("."), vi]));
        }
        acc.push([k, v]);
        return acc;
    }, []);
}
exports.jsonPathEntries = jsonPathEntries;
function position(text, startOffsetOrRange, endOffsetOrUndefined) {
    let startOffset;
    let endOffset;
    if (typeof startOffsetOrRange === "number") {
        startOffset = startOffsetOrRange;
        endOffset = endOffsetOrUndefined;
    }
    else {
        startOffset = startOffsetOrRange[0];
        endOffset = startOffsetOrRange[1];
    }
    return {
        start: point(text, startOffset),
        end: point(text, endOffset),
    };
}
exports.position = position;
function point(text, offset) {
    const lines = text.substr(0, offset).split(/\n/);
    return {
        line: lines.length,
        column: lines[lines.length - 1].length + 1,
        offset,
    };
}
exports.point = point;
//# sourceMappingURL=helpers.js.map