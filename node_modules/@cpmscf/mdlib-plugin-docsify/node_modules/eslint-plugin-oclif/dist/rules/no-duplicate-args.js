"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const experimental_utils_1 = require("@typescript-eslint/experimental-utils");
const util_1 = require("../util");
exports.default = util_1.createRule({
    name: 'no-duplicate-args',
    meta: {
        type: 'problem',
        docs: {
            description: '',
            category: 'Possible Errors',
            recommended: false,
        },
        schema: [],
        messages: {
            'errorMultipleArgs': `Avoid using same name arguments {{ name }}`,
        }
    },
    defaultOptions: [],
    create(context) {
        return {
            'ClassDeclaration, ClassExpression'(node) {
                const sourceCode = context.getSourceCode();
                const properties = node.body.body;
                let flagsNameVal = [];
                for (let element of properties) {
                    if (element.type === experimental_utils_1.AST_NODE_TYPES.ClassProperty) {
                        let name = sourceCode.text.slice(...element.key.range);
                        if (name === 'args' && element.value.type === experimental_utils_1.AST_NODE_TYPES.ArrayExpression) {
                            let values = element.value.elements;
                            for (let objEle of values) {
                                if (objEle.type === experimental_utils_1.AST_NODE_TYPES.ObjectExpression) {
                                    let objProp = objEle.properties;
                                    for (let props of objProp) {
                                        if (props.type === experimental_utils_1.AST_NODE_TYPES.Property) {
                                            let propName = sourceCode.text.slice(...props.key.range);
                                            let propVal = sourceCode.text.slice(...props.value.range);
                                            if (propName === 'name') {
                                                if (!flagsNameVal.includes(propVal))
                                                    flagsNameVal.push(propVal);
                                                else {
                                                    context.report({
                                                        node,
                                                        messageId: 'errorMultipleArgs',
                                                        data: {
                                                            name: propVal,
                                                        }
                                                    });
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    }
});
//# sourceMappingURL=no-duplicate-args.js.map