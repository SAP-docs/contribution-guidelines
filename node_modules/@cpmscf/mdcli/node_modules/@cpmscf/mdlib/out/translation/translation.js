"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranslationJsonGenerator = void 0;
const tslib_1 = require("tslib");
const __1 = require("..");
class TranslationJsonGenerator {
    generate(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (options.translation === undefined)
                throw new Error("Missing required translation configuration");
            if (options.translation.template.collections !== undefined &&
                options.translation.collections !== undefined)
                throw new Error("Collection specifications override collections in the translation JSON template. Remove collections from either the 'translation.template' or from 'translation'.");
            return Object.assign(Object.assign({}, options.translation.template), { collections: yield Promise.all(options.translation.collections.map(c => this.generateCollection(c, options.profiles))) });
        });
    }
    generateCollection(options, profiles) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            options.includePattern = options.includePattern || TranslationJsonGenerator.DEFAULT_INCLUDE_PATTERN;
            if (options.profile) {
                return this.generateCollectionFromProfile(options, profiles);
            }
            return {
                collectionName: options.collectionName,
                folders: options.folders,
            };
        });
    }
    generateCollectionFromProfile(options, profiles) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            options.includePattern = options.includePattern || TranslationJsonGenerator.DEFAULT_INCLUDE_PATTERN;
            if (profiles === undefined || profiles.configurations === undefined)
                throw new Error("Translation references profile but no profiles are defined");
            const profile = profiles.configurations.find(p => p.name === options.profile);
            if (profile === undefined)
                throw new Error(`Profile ${options.profile} referenced by translation collection ${options.collectionName} does not exist.`);
            if (options.folders.length > 1)
                throw new Error(`Translation collection ${options.collectionName} references multiple folders but only one is support when using profiles.`);
            const folder = options.folders.find(f => f) || {};
            const files = (yield __1.globAsync(options.includePattern, {
                cwd: folder.startingFolderPath,
            })).filter(f => {
                const filePathParts = f.split(/\//);
                return filePathParts.find(part => profile.excludes.indexOf(part) !== -1) === undefined;
            });
            folder.sourceFilters = [...(folder.sourceFilters || []), ...files];
            return {
                collectionName: options.collectionName,
                folders: [folder],
            };
        });
    }
}
exports.TranslationJsonGenerator = TranslationJsonGenerator;
TranslationJsonGenerator.DEFAULT_INCLUDE_PATTERN = "**/*.{markdown,md,yml}";
//# sourceMappingURL=translation.js.map