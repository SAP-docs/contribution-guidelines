import { Attacher, Settings } from "unified";
import { Node } from "unist";
import { SimpleGit } from "simple-git";
import { Topic } from "../lib";
declare type RecursivePartial<T> = {
    [P in keyof T]?: RecursivePartial<T[P]>;
};
export interface DitaConverterOptions {
    path: string;
    config: string;
    dita: DitaOptions;
}
export interface PartialDitaConverterOptions extends RecursivePartial<DitaConverterOptions> {
    dita: PartialDitaOptions;
    excludePatterns?: string[];
}
export declare function ditaOptionsWithDefaults(partial: PartialDitaConverterOptions): DitaConverterOptions;
export interface DitaOptions {
    /**
     * Outout path of DITA resources, relative to CWD.
     */
    outputPath: string;
    /**
     * Glob patterns of files to include, in addition to what's in the MkDocs nav.
     * Relative to RcConfig#path. Defaults to /&#42;&#42;/&#42;.{png,svg,jpg,jpeg,gif}
     */
    includePatterns: string[];
    /**
     * Glob patterns of files to exclude.
     */
    excludePatterns: string[];
    /**
     * Prett-print generated XML. Defaults to false.
     */
    pretty: boolean;
    /**
     * Base URL for editing. Typically, this should point to your repo root, e.g.
     * `https://github.com/myOrg/myDocsProject/blob/master`. Individual file paths will be appended
     * to this URL for edit links.
     */
    editBase?: string;
    /**
     * Framework plugin to use if not mkdocs.
     */
    frameworkPlugin?: string;
    project: Project;
    deliverable: {
        buildname?: string;
        label: string;
        language: Language;
        loio: string;
        rootfile: string;
        transtype: TranslationType;
        version: string;
        owner: string;
        shortdesc: string;
        outputmetas: OutputMeta[];
    };
}
export interface PartialDitaOptions extends Partial<DitaOptions> {
    project: Project;
    deliverable: {
        buildname?: string;
        label: string;
        language: Language;
        loio: string;
        rootfile: string;
        transtype: TranslationType;
        version: string;
        owner: string;
        shortdesc: string;
        outputmetas: OutputMeta[];
    };
}
export interface DitaMetadata {
    [name: string]: any;
    meta: Meta;
    mapref: TopicHead;
}
export interface Meta {
    project: Project;
    deliverable: Deliverable;
}
export interface Project {
    name: string;
    coordinator: string;
    format: ProjectFormat;
}
export interface Deliverable {
    buildname: string;
    label: string;
    language: Language;
    loio: string;
    rootfile: string;
    shortdesc: string;
    transtype: TranslationType;
    lastmodifiedby: string;
    lastmodified: string;
    version: string;
    owner: string;
    outputmetas: OutputMeta[];
}
export declare type ProjectFormat = "markdown";
export declare type Language = "en-US";
export declare type TranslationType = "html5.uacp";
export interface OutputMeta {
    outputmeta: Param[];
}
export declare type Param = {
    name: "product";
    value: string;
} | {
    name: "version_name";
    value: "Cloud";
} | {
    name: "version_sapid";
    value: string;
} | {
    name: "product_sapid";
    value: string;
} | {
    name: "product_name";
    value: string;
} | {
    name: "version";
    value: "Cloud";
};
export interface TopicHead {
    label: string;
    refs: TopicHead[];
}
export interface TopicRef extends TopicHead {
    type: string;
    author: string;
    href: string;
    format?: string;
    lastmodifiedby: string;
    lastmodified: string;
}
export interface ExecOutput {
    stdout?: string;
    stderr?: string;
}
export interface FileLogEntry {
    lastmodifiedby: string;
    lastmodified: string;
    href: string;
    author: string;
}
interface FileMetaIndex {
    [key: string]: TopicRef | undefined;
}
export declare function nodeToText(node: Node): string;
export declare function isTopicRef(topic: TopicHead): topic is TopicRef;
/**
 * Create a ZIP for upload to the UACP based on local files.
 */
export declare class DitaConverter {
    static FRONTMATTER_TYPE: string;
    static FRONTMATTER_TITLE: string;
    private git;
    constructor(git?: SimpleGit);
    getGitLog(projectPath: string, nav: Topic[]): Promise<FileLogEntry[]>;
    getFileMetadata(fileLog: FileLogEntry[], options: DitaConverterOptions): Promise<FileMetaIndex>;
    private getMostRecentModification;
    private getTopicReferences;
    /**
     * Filters external links and files matches by excludePatterns from the nav.
     *
     * @param {NavEntry[]} nav Raw nav
     * @param {string[]} excludePatterns Glob patterns to exclude
     * @returns {NavEntry[]} Filtered nav
     */
    private filterNav;
    metadata(opts: PartialDitaConverterOptions): Promise<DitaMetadata>;
    metadataXml(metadata: DitaMetadata, pretty?: boolean): Promise<string>;
    ditaZip(opts: PartialDitaConverterOptions): Promise<void>;
    /**
     * Creates a unifiedJS rule that extracts headings and DITA types from Markdown document sources.
     * Supports both Headings (h1) and Frontmatter (title, dita.type). Frontmatter takes precedence.
     *
     * @returns Holder including the rule and the extracted meta info. Meta info will be available after the rule was invoked.
     */
    extractor(): {
        rule: Attacher<[], Settings>;
        meta: {
            label: string;
            type: string;
        };
    };
}
export {};
//# sourceMappingURL=dita.d.ts.map