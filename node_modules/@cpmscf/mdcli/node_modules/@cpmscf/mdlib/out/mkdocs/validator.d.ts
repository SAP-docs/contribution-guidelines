import { MkdocsConfig, RcConfig, VFile } from "..";
import { AsyncGlob } from "../glob";
import { TargetFinder } from "../targets";
export declare const CODE_FILE_NOT_FOUND = "mkdocs-lint:file-not-found";
export declare const CODE_FILE_NOT_LINKED = "mkdocs-lint:file-not-linked";
/**
 * Validator for mkdocs configuration:
 * 1. Validates files linked in `nav` exist (relative to `docs_dir` and `rcConfig.path`)
 * 2. Validates Markdown files in `rcConfig.path` are linked in `nav`
 */
export declare class MkdocsValidator {
    private rcConfig;
    private finder;
    private glob;
    constructor(rcConfig: RcConfig, finder: TargetFinder, glob: AsyncGlob);
    /**
     * Validates the specified `conf` does not contain any issues.
     *
     * @param conf The configuration to check
     * @returns {VFile[]} Array of VFiles representing 1) mkdocs.yml (always), 2) all unlinked files (if any)
     */
    validate(conf: MkdocsConfig): Promise<VFile[]>;
    /**
     * Walks the `nav` tree and creates a map of file paths to locations where they occur.
     *
     * @param conf The configuration to check
     * @param nav The `nav` root
     * @param acc Accumulator for recursion
     * @returns Map of file to location(s)
     */
    private filesAndHeadingsIn;
    /**
     * Validates all the links in `conf` point to existing files
     *
     * @param {VFile} vFile Virtual file representing mkdocs config
     * @param filesInConf Files to check
     * @returns {VFile} VFile representing the mkdocs config file. Check `VFile#messages` to see if it had issues.
     */
    private validateLinks;
    /**
     * Validates all the files in `rcConf.path` are linked in `conf.nav`
     *
     * @param filesInConf Files to check
     * @returns {VFile[]} Array with unlinked files
     */
    private validateFiles;
    private validateHeadings;
}
//# sourceMappingURL=validator.d.ts.map