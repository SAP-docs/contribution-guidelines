import { Change } from "diff";
import { VFileMessage } from "vfile-message";
import { VFile as UnifiedVFile, VFileContents } from "vfile";
export interface VFile extends UnifiedVFile {
    rawContents: VFileContents | undefined;
}
/**
 * A topic, i.e. a basic nav entry with children. It has exactly one string key,
 * and the string key is the title of the nav entry. E.g.:
 *
 * ```markdown
 * 1. Overview
 *   1. A sub item
 * ```
 *
 * ```ts
 * {
 *   "Overview": [{"A sub item": []}]
 * }
 * ```
 *
 * A topic may have no children, which reduces it to a label and prevents it from being rendered in the
 * XML metadata output.
 */
export interface Topic {
    title?: string;
    children: Topic[];
}
/**
 * A topic nav that has not only a title, but also links to a specific document.
 * It has exactly one string key, and the string key is the title of the nav entry. E.g.:
 *
 * ```markdown
 * 1. [Overview](link-to-file.md)
 *   1. [Sub](sub.md)
 * ```
 *
 * ```ts
 * {
 *   "Overview": [{"Sub": [], $ref: "sub.md"}],
 *   "$ref": "link-to-file.md"
 * }
 * ```
 *
 * A reference may have no children, which makes it a regular file reference with a title.
 */
export interface Reference extends Topic {
    path: string;
}
/**
 * Tells if the specified nav entry is a topic reference.
 *
 * @param navEntry Nav entry to check
 * @returns true iff the nav entry is an instance of Reference
 */
export declare function isReference(navEntry: Topic): navEntry is Reference;
export declare type Fix = {
    diffs: Change[];
    content: string;
};
export interface FixMessage extends VFileMessage {
    fix?: Fix;
    content?: string;
    shortLink?: string;
}
export declare function applyFixes(file: VFile): string;
//# sourceMappingURL=lib.d.ts.map