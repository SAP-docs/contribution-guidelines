/**
 * @author D053411
 * @copyright 2020 SAP SE
 * @license SEE LICENSE IN LICENSE
 * @module titlecase
 * @fileoverview
 *   Warn when headings increment with more than 1 level at a time.
 *
 * @example {"name": "ok.md"}
 *
 *   # Alpha
 *
 *   ## Bravo
 *
 * @example {"name": "not-ok.md", "label": "input"}
 *
 *   # Charlie
 *
 *   ### Delta
 *
 * @example {"name": "not-ok.md", "label": "output"}
 *
 *   3:1-3:10: Heading levels should increment by one level at a time
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listItemCaseRule = exports.CODE_LIST_ITEM_CASE = void 0;
const rule = require("unified-lint-rule");
const visit = require("unist-util-visit");
const generated = require("unist-util-generated");
const helpers_1 = require("../helpers");
const reason = "The first word in list items should be capitalized";
const shortLink = "065t";
exports.CODE_LIST_ITEM_CASE = "remark-lint:list-item-case";
const PARAGRAPH_FIRST_WORD_REGEX = /(\W|_)*([^\W_]+)/;
const LIST_FIRST_WORD_REGEX = /([0-9.*\-+]*(\W|_)*)([^\W_]+)/;
function listItemCaseRule(processor) {
    return rule(exports.CODE_LIST_ITEM_CASE, function (tree, file) {
        visit(tree, "listItem", visitListItem);
        function visitListItem(listItem) {
            if (generated(listItem))
                return;
            let firstChild = listItem;
            while (firstChild.children)
                firstChild = firstChild.children[0];
            const fileSlice = firstChild.value;
            const match = PARAGRAPH_FIRST_WORD_REGEX.exec(fileSlice);
            if (!match)
                return;
            const originalFirstWord = match[2];
            const endOffset = originalFirstWord.length;
            const node = {
                type: "text",
                value: originalFirstWord,
                position: {
                    start: {
                        line: firstChild.position.start.line,
                        column: firstChild.position.start.column,
                        offset: firstChild.position.start.offset,
                    },
                    end: {
                        line: firstChild.position.start.line,
                        column: firstChild.position.start.column + endOffset,
                        offset: firstChild.position.start.offset + endOffset,
                    },
                },
            };
            const fixedFirstWord = LIST_FIRST_WORD_REGEX.exec(processor
                .stringify(listItem))[3];
            helpers_1.makeMessage(exports.CODE_LIST_ITEM_CASE, originalFirstWord, fixedFirstWord, node, reason, file, shortLink);
        }
    });
}
exports.listItemCaseRule = listItemCaseRule;
//# sourceMappingURL=rule-list-item-case.js.map