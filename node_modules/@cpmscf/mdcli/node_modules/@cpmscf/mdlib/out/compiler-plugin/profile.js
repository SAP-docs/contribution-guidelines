"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.profileTokenizer = exports.NODE_TYPE_PROFILE = exports.PROFILE_BLOCK_END = void 0;
const lineFeed = 10; //  '\n'
const tab = 9;
const space = 32;
const lessThan = 60;
const blockStart = /<!--\s*if\s*(.*?)\s*-->/;
exports.PROFILE_BLOCK_END = /<!--\s*endif\s*-->/;
exports.NODE_TYPE_PROFILE = "profile";
// eslint-disable-next-line complexity
function tokenizer(eat, value, silent) {
    const length = value.length;
    let index = 0;
    let nextLf;
    let line;
    let code;
    // Eat initial spacing.
    while (index < length) {
        code = value.charCodeAt(index);
        if (code !== tab && code !== space) {
            break;
        }
        index++;
    }
    if (value.charCodeAt(index) !== lessThan) {
        return;
    }
    nextLf = value.indexOf(String.fromCharCode(lineFeed), index + 1);
    nextLf = nextLf === -1 ? length : nextLf;
    line = value.slice(index, nextLf);
    const match = blockStart.exec(line);
    if (!match)
        return;
    if (silent) {
        return true;
    }
    index = nextLf;
    const now = eat.now();
    now.offset = now.offset + nextLf + 1;
    now.line += 1;
    now.column = 0;
    const contentStart = index + 1; // plus newline
    let contentEnd;
    let endFound = false;
    if (!exports.PROFILE_BLOCK_END.test(line)) {
        while (index < length) {
            nextLf = value.indexOf(String.fromCharCode(lineFeed), index + 1);
            nextLf = nextLf === -1 ? length : nextLf;
            line = value.slice(index + 1, nextLf);
            if (exports.PROFILE_BLOCK_END.test(line)) {
                endFound = true;
                contentEnd = index + 1; // plus newline
                if (line) {
                    index = nextLf;
                }
                break;
            }
            index = nextLf;
        }
    }
    const content = value.slice(contentStart, contentEnd);
    const children = this.tokenizeBlock(content, now);
    const subvalue = value.slice(0, index);
    return eat(subvalue)({ type: exports.NODE_TYPE_PROFILE, value: match[1], children, endFound });
}
exports.profileTokenizer = tokenizer;
//# sourceMappingURL=profile.js.map