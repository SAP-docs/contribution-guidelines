// https://github.com/remarkjs/remark/blob/12.0.1/packages/remark-parse/lib/tokenize/html-block.js modified to handle interrupts
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.htmlTokenizer = void 0;
const html_1 = require("../util/html");
const interrupt_1 = require("../util/interrupt");
module.exports = blockHtml;
const tab = "\t";
const space = " ";
const lineFeed = "\n";
const lessThan = "<";
const rawOpenExpression = /^<(script|pre|style)(?=(\s|>|$))/i;
const rawCloseExpression = /<\/(script|pre|style)>/i;
const commentOpenExpression = /^<!--/;
const commentCloseExpression = /-->/;
const instructionOpenExpression = /^<\?/;
const instructionCloseExpression = /\?>/;
const directiveOpenExpression = /^<![A-Za-z]/;
const directiveCloseExpression = />/;
const cdataOpenExpression = /^<!\[CDATA\[/;
const cdataCloseExpression = /]]>/;
const elementCloseExpression = /^$/;
const otherElementOpenExpression = new RegExp(`${html_1.openCloseTag.source}\\s*$`);
function blockHtml(eat, value, silent) {
    const blocks = this.options.blocks.join("|");
    const elementOpenExpression = new RegExp(`^</?(${blocks})(?=(\\s|/?>|$))`, "i");
    const length = value.length;
    let index = 0;
    let next;
    let line;
    let offset;
    let character;
    let sequence;
    const interruptors = this.interruptHtml || [];
    const sequences = [
        [rawOpenExpression, rawCloseExpression, true],
        [commentOpenExpression, commentCloseExpression, true],
        [instructionOpenExpression, instructionCloseExpression, true],
        [directiveOpenExpression, directiveCloseExpression, true],
        [cdataOpenExpression, cdataCloseExpression, true],
        [elementOpenExpression, elementCloseExpression, true],
        [otherElementOpenExpression, elementCloseExpression, false],
    ];
    // Eat initial spacing.
    while (index < length) {
        character = value.charAt(index);
        if (character !== tab && character !== space) {
            break;
        }
        index++;
    }
    if (value.charAt(index) !== lessThan) {
        return;
    }
    next = value.indexOf(lineFeed, index + 1);
    next = next === -1 ? length : next;
    line = value.slice(index, next);
    offset = -1;
    const count = sequences.length;
    while (++offset < count) {
        if (sequences[offset][0].test(line)) {
            sequence = sequences[offset];
            break;
        }
        // Check if the following code contains a possible block.
        if (interrupt_1.interrupt(interruptors, this.blockTokenizers, this, [eat, line, true])) {
            break;
        }
    }
    if (!sequence) {
        return;
    }
    if (silent) {
        return sequence[2];
    }
    index = next;
    if (!sequence[1].test(line)) {
        while (index < length) {
            next = value.indexOf(lineFeed, index + 1);
            next = next === -1 ? length : next;
            line = value.slice(index + 1, next);
            if (sequence[1].test(line)) {
                if (line) {
                    index = next;
                }
                break;
            }
            index = next;
        }
    }
    const subvalue = value.slice(0, index);
    return eat(subvalue)({ type: "html", value: subvalue });
}
exports.htmlTokenizer = blockHtml;
//# sourceMappingURL=html-block.js.map