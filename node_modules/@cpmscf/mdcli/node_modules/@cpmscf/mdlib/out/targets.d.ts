import { MkdocsConfig, RcConfig } from ".";
import { Attacher, Settings } from "unified";
export declare class TargetFinder {
    static MARKDOWN_REGEX: RegExp;
    static HTML_REGEX: RegExp;
    private targets;
    private rcConf;
    private mkdocsConfig;
    constructor(rcConf: RcConfig, mkdocsConfig: MkdocsConfig);
    /**
     * Finds the specified file, relative to `rcConf.path`.
     *
     * @param {string} filePath Path to file, relative to `rcConf.path`
     * @returns {Set<string>} Hashes found in file, or undefined if it did not exist
     */
    private find;
    private processMarkdown;
    private processHtml;
    /**
     * Re-indexes the specified file.
     *
     * @param filePath Path to the file to update
     * @returns {void}
     */
    update(filePath: string): Promise<void>;
    exists(filePath: string, hash?: string): Promise<boolean>;
    hashesIn(file: string): Promise<Set<string>>;
    /**
     * Creates a unifiedJS rule that extracts hashes from Markdown document sources.
     *
     * @returns Holder including the rule and the extracted hashes. Hash info will be available after the rule was invoked.
     */
    extractor(): {
        rule: Attacher<[], Settings>;
        hashes: string[];
    };
}
//# sourceMappingURL=targets.d.ts.map