"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenMatcher = void 0;
const tslib_1 = require("tslib");
require("markdown-it");
const vfile = require("vfile");
const { readFile } = require("fs").promises;
const mdlib_1 = require("@cpmscf/mdlib");
const path_1 = require("path");
var TokenMatcher;
(function (TokenMatcher) {
    TokenMatcher["HEADING_OPEN"] = "heading_open";
    TokenMatcher["INLINE"] = "inline";
    TokenMatcher["HEADING_CLOSE"] = "heading_close";
})(TokenMatcher = exports.TokenMatcher || (exports.TokenMatcher = {}));
class Scanner {
    constructor(globPattern, processor, options = {}, rcConfig) {
        this.globPattern = globPattern;
        this.processor = processor;
        this.options = options;
        this.rcConfig = rcConfig;
    }
    start() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const globFiles = yield mdlib_1.globAsync(this.globPattern, Object.assign({ cwd: this.rcConfig.path }, this.options));
            return Promise.all(globFiles.map((filePath) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const data = yield readFile(path_1.join(this.rcConfig.path, filePath), "utf-8");
                const file = vfile({
                    contents: data,
                    path: filePath,
                });
                file.rawContents = data;
                return this.processor.process(file);
            })));
        });
    }
}
exports.default = Scanner;
//# sourceMappingURL=scanner.js.map