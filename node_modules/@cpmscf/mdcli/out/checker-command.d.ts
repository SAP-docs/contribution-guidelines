import { Command, flags } from "@oclif/command";
import { RcConfig, VFile } from "@cpmscf/mdlib";
import { TargetFinder, MkdocsConfig } from "@cpmscf/mdlib";
import * as unified from "unified";
import { Settings, Attacher } from "unified";
export declare const EXIT_CODE_BAD_CONFIG = 5;
export interface Configuration extends RcConfig {
    path: string;
    fix?: boolean;
    color?: boolean;
}
export default abstract class RuleCommand extends Command {
    static flags: {
        help: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        path: flags.IOptionFlag<string | undefined>;
        fix: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        config: flags.IOptionFlag<string | undefined>;
        color: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        ignore: flags.IOptionFlag<string[]>;
    };
    abstract getRules(targetFinder: TargetFinder, processor: unified.Processor): Promise<Attacher<[], Settings>[]>;
    getChecks(_: TargetFinder): Promise<() => Promise<VFile[]>>;
    getConfig(ctor?: typeof Command): Configuration;
    run(): Promise<void>;
    private getFixInfo;
    protected getMkdocsConfig(): Promise<MkdocsConfig>;
}
//# sourceMappingURL=checker-command.d.ts.map