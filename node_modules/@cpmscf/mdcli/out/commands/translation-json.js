"use strict";
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const mdlib_1 = require("@cpmscf/mdlib");
const checker_command_1 = require("../checker-command");
const { writeFile } = require("fs").promises;
class TranslationJsonCommand extends command_1.Command {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const conf = mdlib_1.loadConfig();
            const generator = new mdlib_1.TranslationJsonGenerator();
            try {
                const json = yield generator.generate(conf);
                yield writeFile(TranslationJsonCommand.TRANSLATION_JSON_PATH, JSON.stringify(json, null, 2));
                this.log(`Output written to ${TranslationJsonCommand.TRANSLATION_JSON_PATH}`);
            }
            catch (error) {
                this.error(`Could not generate ${TranslationJsonCommand.TRANSLATION_JSON_PATH}: ${error.message}`, {
                    exit: checker_command_1.EXIT_CODE_BAD_CONFIG,
                });
            }
        });
    }
}
TranslationJsonCommand.description = "Generate translation_v2.json files for automated translation. " +
    "For configuration, provide configuration via a `.cdcrc` file as described in " +
    "[the `@cpmscf/mdlib` documentation](https://github.wdf.sap.corp/D053411/cpmscf-docs-lib#configuration).";
TranslationJsonCommand.flags = {
    help: command_1.flags.help({ char: "h" }),
};
TranslationJsonCommand.TRANSLATION_JSON_PATH = "translation_v2.json";
module.exports = TranslationJsonCommand;
//# sourceMappingURL=translation-json.js.map