"use strict";
const tslib_1 = require("tslib");
const mdlib_1 = require("@cpmscf/mdlib");
const checker_command_1 = require("../checker-command");
class CiChecker extends checker_command_1.default {
    getRules(finder, processor) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const mkdocsConfig = yield this.getMkdocsConfig();
            const variablePlugins = [];
            if (mkdocsConfig)
                variablePlugins.push(mdlib_1.preferVariableRule(mkdocsConfig), mdlib_1.resolveVariables({ mkdocsConfig }), mdlib_1.resolveIcons({ mkdocsConfig }));
            else
                (this.warn("mkdocs.yml not found, skipping variable checks"));
            const rcConfig = this.getConfig();
            const profileConf = rcConfig.profiles || {
                configurations: [],
            };
            return [
                mdlib_1.listItemCasePlugin,
                mdlib_1.listItemCaseRule(processor),
                // Temporarily removed until we get proper admonition tokenizer support. MJ 2020-09-24
                // admonitionRule,
                mdlib_1.headingCasePlugin,
                mdlib_1.headingCaseRule(processor),
                mdlib_1.frontmatterHeadingCaseRule,
                mdlib_1.linkTargetExistsRule(finder),
                mdlib_1.noLoioRule(),
                mdlib_1.profileRule(profileConf),
                mdlib_1.termRule(rcConfig),
                ...variablePlugins,
            ];
        });
    }
    getChecks(finder) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const validator = new mdlib_1.MkdocsValidator(this.getConfig(), finder, mdlib_1.globAsync);
            return validator.validate.bind(validator, yield this.getMkdocsConfig());
        });
    }
}
CiChecker.description = "Run all available checks";
CiChecker.examples = [
    "$ cdc ci -p path-to-markdown-files",
];
CiChecker.flags = Object.assign({}, checker_command_1.default.flags);
CiChecker.args = [{ name: "file" }];
module.exports = CiChecker;
//# sourceMappingURL=ci.js.map