"use strict";
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const mdlib_1 = require("@cpmscf/mdlib");
const checker_command_1 = require("../checker-command");
const path_1 = require("path");
class DitaCommand extends command_1.Command {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const conf = mdlib_1.loadConfig();
            const ditaConverter = new mdlib_1.DitaConverter();
            try {
                yield ditaConverter.ditaZip(conf);
                this.log(`Output written to ${path_1.join(conf.dita.outputPath, conf.dita.deliverable.rootfile)}`);
            }
            catch (error) {
                this.error(`Could not generate UACP ZIP: ${error.message}`, {
                    exit: checker_command_1.EXIT_CODE_BAD_CONFIG,
                });
            }
        });
    }
}
DitaCommand.description = "Create a ZIP for upload to the UACP system based on local files. " +
    "By default, supports `mkdocs`, which can be adjusted by configuration/plugin implementation. " +
    "For configuration, provide configuration via a `.cdcrc` file as described in " +
    "[the `@cpmscf/mdlib` documentation](https://github.wdf.sap.corp/D053411/cpmscf-docs-lib#configuration).";
DitaCommand.flags = {
    help: command_1.flags.help({ char: "h" }),
};
module.exports = DitaCommand;
//# sourceMappingURL=dita.js.map